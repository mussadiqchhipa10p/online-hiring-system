// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EMPLOYER
  CANDIDATE
}

enum JobStatus {
  DRAFT
  PUBLISHED
  CLOSED
}

enum AppStatus {
  PENDING
  REVIEW
  INTERVIEW_SCHEDULED
  REJECTED
  HIRED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  role      Role
  name      String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  employer  Employer?
  candidate Candidate?

  @@map("users")
}

model Employer {
  id          String @id @default(cuid())
  userId      String @unique
  companyName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs Job[]

  @@map("employers")
}

model Candidate {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumes     Resume[]
  applications Application[]

  @@map("candidates")
}

model Job {
  id          String     @id @default(cuid())
  employerId  String
  title       String
  description String
  location    String
  skills      String[]
  status      JobStatus  @default(DRAFT)
  views       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  employer    Employer      @relation(fields: [employerId], references: [id], onDelete: Cascade)
  applications Application[]

  @@map("jobs")
}

model Application {
  id         String    @id @default(cuid())
  jobId      String
  candidateId String
  status     AppStatus @default(PENDING)
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  job      Job     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  rating   Rating?

  @@map("applications")
}

model Rating {
  id           String   @id @default(cuid())
  applicationId String  @unique
  score        Int      @default(0)
  feedback     String?
  interviewer  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("ratings")
}

model Resume {
  id         String   @id @default(cuid())
  candidateId String
  url        String
  parsedJson Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@map("resumes")
}
